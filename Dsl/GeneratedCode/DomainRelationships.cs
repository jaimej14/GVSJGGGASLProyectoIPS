//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship TapizHasVentanaPrincipal
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d4426c76-abcc-4ed0-af9f-c500abf99175")]
	public partial class TapizHasVentanaPrincipal : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasVentanaPrincipal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4426c76, 0xabcc, 0x4ed0, 0xaf, 0x9f, 0xc5, 0x00, 0xab, 0xf9, 0x91, 0x75);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasVentanaPrincipal link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">VentanaPrincipal to use as the target of the relationship.</param>
		public TapizHasVentanaPrincipal(Tapiz source, VentanaPrincipal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasVentanaPrincipal.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaPrincipal(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaPrincipal(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaPrincipal(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaPrincipal(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x3388c171, 0x8fba, 0x4135, 0xbb, 0xa6, 0xb1, 0xc0, 0xd6, 0x05, 0x71, 0x70);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal/Tapiz.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal/Tapiz.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaPrincipal", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3388c171-8fba-4135-bba6-b1c0d6057170")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a VentanaPrincipal
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(VentanaPrincipal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaPrincipalDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(VentanaPrincipal element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaPrincipalDomainRoleId, newTapiz);
		}
		#endregion
		#region VentanaPrincipal domain role code
		
		/// <summary>
		/// VentanaPrincipal domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaPrincipalDomainRoleId = new global::System.Guid(0x8e7ef882, 0x9ac0, 0x46cb, 0xb2, 0x91, 0x0d, 0xa8, 0x4a, 0x9f, 0x92, 0x8c);
		
		/// <summary>
		/// DomainRole VentanaPrincipal
		/// Description for
		/// UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.VentanaPrincipal
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal/VentanaPrincipal.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal/VentanaPrincipal.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal/VentanaPrincipal.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8e7ef882-9ac0-46cb-b291-0da84a9f928c")]
		public virtual VentanaPrincipal VentanaPrincipal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VentanaPrincipal)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaPrincipalDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaPrincipalDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaPrincipal of a Tapiz
		/// <summary>
		/// Gets VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static VentanaPrincipal GetVentanaPrincipal(Tapiz element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TapizDomainRoleId) as VentanaPrincipal;
		}
		
		/// <summary>
		/// Sets VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaPrincipal(Tapiz element, VentanaPrincipal newVentanaPrincipal)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TapizDomainRoleId, newVentanaPrincipal);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the TapizHasVentanaPrincipal link to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal GetLinkToVentanaPrincipal (global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz tapizInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal>(tapizInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.TapizDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Tapiz not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaPrincipal link accessor
		/// <summary>
		/// Get the TapizHasVentanaPrincipal link to a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal GetLinkToTapiz (global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaPrincipal ventanaPrincipalInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal>(ventanaPrincipalInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VentanaPrincipal not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasVentanaPrincipal instance accessors
		
		/// <summary>
		/// Get any TapizHasVentanaPrincipal links between a given Tapiz and a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaPrincipal target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal link in links )
			{
				if ( target.Equals(link.VentanaPrincipal) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasVentanaPrincipal link between a given Tapizand a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaPrincipal target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaPrincipal link in links )
			{
				if ( target.Equals(link.VentanaPrincipal) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship TapizHasVentanaSecundarium
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("19fd308c-7bc1-41d1-9d4d-2f83f96a5bea")]
	public partial class TapizHasVentanaSecundarium : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasVentanaSecundarium domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19fd308c, 0x7bc1, 0x41d1, 0x9d, 0x4d, 0x2f, 0x83, 0xf9, 0x6a, 0x5b, 0xea);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasVentanaSecundarium link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">VentanaSecundaria to use as the target of the relationship.</param>
		public TapizHasVentanaSecundarium(Tapiz source, VentanaSecundaria target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasVentanaSecundarium.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasVentanaSecundarium.VentanaSecundariaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaSecundarium(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaSecundarium(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaSecundarium(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaSecundarium(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x9ffaa3f2, 0x5176, 0x434e, 0xa9, 0xe1, 0x56, 0x3d, 0xdc, 0xbf, 0x0c, 0xc8);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium/Tapiz.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium/Tapiz.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaSecundarium", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9ffaa3f2-5176-434e-a9e1-563ddcbf0cc8")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a VentanaSecundaria
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(VentanaSecundaria element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaSecundariaDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(VentanaSecundaria element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaSecundariaDomainRoleId, newTapiz);
		}
		#endregion
		#region VentanaSecundaria domain role code
		
		/// <summary>
		/// VentanaSecundaria domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaSecundariaDomainRoleId = new global::System.Guid(0xe7862f4e, 0x5fbf, 0x4379, 0xaf, 0xec, 0xd7, 0x2f, 0x90, 0xf1, 0x11, 0x65);
		
		/// <summary>
		/// DomainRole VentanaSecundaria
		/// Description for
		/// UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.VentanaSecundaria
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium/VentanaSecundaria.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium/VentanaSecundaria.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium/VentanaSecundaria.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e7862f4e-5fbf-4379-afec-d72f90f11165")]
		public virtual VentanaSecundaria VentanaSecundaria
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VentanaSecundaria)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaSecundariaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaSecundariaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaSecundarium of a Tapiz
		/// <summary>
		/// Gets a list of VentanaSecundarium.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<VentanaSecundaria> GetVentanaSecundarium(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasVentanaSecundarium links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium> GetLinksToVentanaSecundarium ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium>(tapizInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.TapizDomainRoleId);
		}
		#endregion
		#region VentanaSecundaria link accessor
		/// <summary>
		/// Get the TapizHasVentanaSecundarium link to a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium GetLinkToTapiz (global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaSecundaria ventanaSecundariaInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium>(ventanaSecundariaInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.VentanaSecundariaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VentanaSecundaria not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasVentanaSecundarium instance accessors
		
		/// <summary>
		/// Get any TapizHasVentanaSecundarium links between a given Tapiz and a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaSecundaria target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium link in links )
			{
				if ( target.Equals(link.VentanaSecundaria) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasVentanaSecundarium link between a given Tapizand a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaSecundaria target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasVentanaSecundarium link in links )
			{
				if ( target.Equals(link.VentanaSecundaria) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship TapizHasBotons
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f1c36f01-03dc-474f-99fa-9cc1d5394484")]
	public partial class TapizHasBotons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasBotons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1c36f01, 0x03dc, 0x474f, 0x99, 0xfa, 0x9c, 0xc1, 0xd5, 0x39, 0x44, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasBotons link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">Boton to use as the target of the relationship.</param>
		public TapizHasBotons(Tapiz source, Boton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasBotons.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasBotons.BotonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasBotons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasBotons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasBotons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasBotons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0xcd7616e2, 0x47c8, 0x4973, 0x9a, 0x13, 0xe5, 0xa1, 0x53, 0x70, 0xc4, 0x81);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons/Tapiz.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons/Tapiz.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Botons", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd7616e2-47c8-4973-9a13-e5a15370c481")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a Boton
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(Boton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BotonDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(Boton element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BotonDomainRoleId, newTapiz);
		}
		#endregion
		#region Boton domain role code
		
		/// <summary>
		/// Boton domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotonDomainRoleId = new global::System.Guid(0x89e8c154, 0x50ac, 0x4e5a, 0xa7, 0xfe, 0x57, 0x58, 0x62, 0x42, 0xa3, 0x1c);
		
		/// <summary>
		/// DomainRole Boton
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.Boton
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons/Boton.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons/Boton.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons/Boton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("89e8c154-50ac-4e5a-a7fe-57586242a31c")]
		public virtual Boton Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Boton)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Botons of a Tapiz
		/// <summary>
		/// Gets a list of Botons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Boton> GetBotons(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasBotons links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons> GetLinksToBotons ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons>(tapizInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.TapizDomainRoleId);
		}
		#endregion
		#region Boton link accessor
		/// <summary>
		/// Get the TapizHasBotons link to a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons GetLinkToTapiz (global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton botonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons>(botonInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.BotonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Boton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasBotons instance accessors
		
		/// <summary>
		/// Get any TapizHasBotons links between a given Tapiz and a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasBotons link between a given Tapizand a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasBotons link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship TapizHasMenus
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("367cb790-5f27-4578-84e1-322f5a793569")]
	public partial class TapizHasMenus : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasMenus domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x367cb790, 0x5f27, 0x4578, 0x84, 0xe1, 0x32, 0x2f, 0x5a, 0x79, 0x35, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasMenus link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">Menu to use as the target of the relationship.</param>
		public TapizHasMenus(Tapiz source, Menu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasMenus.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasMenus.MenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasMenus(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasMenus(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasMenus(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasMenus(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x9b7db8b9, 0x6dc5, 0x405a, 0xa2, 0x5f, 0x3c, 0x95, 0xd0, 0xef, 0xe5, 0xe7);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus/Tapiz.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus/Tapiz.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Menus", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b7db8b9-6dc5-405a-a25f-3c95d0efe5e7")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a Menu
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(Menu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(Menu element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuDomainRoleId, newTapiz);
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x868d4c6d, 0x5bf4, 0x4685, 0x99, 0x41, 0xd6, 0x99, 0x07, 0x46, 0xa3, 0x70);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus/Menu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus/Menu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus/Menu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("868d4c6d-5bf4-4685-9941-d6990746a370")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menus of a Tapiz
		/// <summary>
		/// Gets a list of Menus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Menu> GetMenus(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasMenus links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus> GetLinksToMenus ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus>(tapizInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.TapizDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the TapizHasMenus link to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus GetLinkToTapiz (global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu menuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus>(menuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.MenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Menu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasMenus instance accessors
		
		/// <summary>
		/// Get any TapizHasMenus links between a given Tapiz and a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasMenus link between a given Tapizand a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasMenus link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship TapizHasItemMenus
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("278f668b-c7a1-442c-adc8-63cfe79064fb")]
	public partial class TapizHasItemMenus : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasItemMenus domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x278f668b, 0xc7a1, 0x442c, 0xad, 0xc8, 0x63, 0xcf, 0xe7, 0x90, 0x64, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasItemMenus link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">ItemMenu to use as the target of the relationship.</param>
		public TapizHasItemMenus(Tapiz source, ItemMenu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasItemMenus.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasItemMenus.ItemMenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasItemMenus(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasItemMenus(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasItemMenus(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasItemMenus(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x560da887, 0x818f, 0x43ec, 0x82, 0x57, 0x5a, 0x4e, 0xf4, 0xa4, 0x8e, 0x2b);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus/Tapiz.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus/Tapiz.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ItemMenus", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("560da887-818f-43ec-8257-5a4ef4a48e2b")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a ItemMenu
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(ItemMenu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemMenuDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(ItemMenu element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemMenuDomainRoleId, newTapiz);
		}
		#endregion
		#region ItemMenu domain role code
		
		/// <summary>
		/// ItemMenu domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemMenuDomainRoleId = new global::System.Guid(0x386257f9, 0xfe3a, 0x4f41, 0x99, 0x54, 0x3e, 0xcc, 0x29, 0x31, 0x5e, 0x4c);
		
		/// <summary>
		/// DomainRole ItemMenu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.ItemMenu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus/ItemMenu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus/ItemMenu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus/ItemMenu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("386257f9-fe3a-4f41-9954-3ecc29315e4c")]
		public virtual ItemMenu ItemMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemMenu)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemMenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemMenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemMenus of a Tapiz
		/// <summary>
		/// Gets a list of ItemMenus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemMenu> GetItemMenus(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemMenu>, ItemMenu>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasItemMenus links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus> GetLinksToItemMenus ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus>(tapizInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.TapizDomainRoleId);
		}
		#endregion
		#region ItemMenu link accessor
		/// <summary>
		/// Get the TapizHasItemMenus link to a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus GetLinkToTapiz (global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu itemMenuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus>(itemMenuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.ItemMenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemMenu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasItemMenus instance accessors
		
		/// <summary>
		/// Get any TapizHasItemMenus links between a given Tapiz and a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus link in links )
			{
				if ( target.Equals(link.ItemMenu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasItemMenus link between a given Tapizand a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasItemMenus link in links )
			{
				if ( target.Equals(link.ItemMenu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship TapizHasEstadoFinned
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("72612f81-913b-42d5-b14e-5fd4cc272e74")]
	public partial class TapizHasEstadoFinned : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasEstadoFinned domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x72612f81, 0x913b, 0x42d5, 0xb1, 0x4e, 0x5f, 0xd4, 0xcc, 0x27, 0x2e, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasEstadoFinned link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">EstadoFin to use as the target of the relationship.</param>
		public TapizHasEstadoFinned(Tapiz source, EstadoFin target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasEstadoFinned.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasEstadoFinned.EstadoFinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasEstadoFinned(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasEstadoFinned(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasEstadoFinned(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasEstadoFinned(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x51a6dcf0, 0x31af, 0x40a0, 0xa0, 0x98, 0xce, 0x4e, 0x65, 0xe0, 0x0f, 0x08);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned/Tapiz.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned/Tapiz.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EstadoFinned", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("51a6dcf0-31af-40a0-a098-ce4e65e00f08")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a EstadoFin
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(EstadoFin element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EstadoFinDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(EstadoFin element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EstadoFinDomainRoleId, newTapiz);
		}
		#endregion
		#region EstadoFin domain role code
		
		/// <summary>
		/// EstadoFin domain role Id.
		/// </summary>
		public static readonly global::System.Guid EstadoFinDomainRoleId = new global::System.Guid(0x475cf23f, 0x5183, 0x45ca, 0xae, 0xe2, 0x58, 0xf3, 0x1f, 0x98, 0x64, 0x23);
		
		/// <summary>
		/// DomainRole EstadoFin
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.EstadoFin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned/EstadoFin.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned/EstadoFin.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned/EstadoFin.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("475cf23f-5183-45ca-aee2-58f31f986423")]
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EstadoFin)DslModeling::DomainRoleInfo.GetRolePlayer(this, EstadoFinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EstadoFinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EstadoFinned of a Tapiz
		/// <summary>
		/// Gets a list of EstadoFinned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EstadoFin> GetEstadoFinned(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EstadoFin>, EstadoFin>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasEstadoFinned links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned> GetLinksToEstadoFinned ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned>(tapizInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.TapizDomainRoleId);
		}
		#endregion
		#region EstadoFin link accessor
		/// <summary>
		/// Get the TapizHasEstadoFinned link to a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned GetLinkToTapiz (global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin estadoFinInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned>(estadoFinInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.EstadoFinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EstadoFin not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasEstadoFinned instance accessors
		
		/// <summary>
		/// Get any TapizHasEstadoFinned links between a given Tapiz and a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasEstadoFinned link between a given Tapizand a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Tapiz source, global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned.TapizDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.TapizHasEstadoFinned link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship VentanaTieneBotons
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("da02da94-3597-4b84-a5ae-98a1a49920f6")]
	public partial class VentanaTieneBotons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaTieneBotons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda02da94, 0x3597, 0x4b84, 0xa5, 0xae, 0x98, 0xa1, 0xa4, 0x99, 0x20, 0xf6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaTieneBotons link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Boton to use as the target of the relationship.</param>
		public VentanaTieneBotons(Ventana source, Boton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaTieneBotons.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaTieneBotons.BotonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaTieneBotons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaTieneBotons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaTieneBotons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaTieneBotons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0xac4b3bd8, 0x04a8, 0x45ea, 0xb2, 0x80, 0x89, 0x85, 0xe5, 0xba, 0xa9, 0x0a);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons/Ventana.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons/Ventana.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TieneBotons", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ac4b3bd8-04a8-45ea-b280-8985e5baa90a")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InVentana of a Boton
		/// <summary>
		/// Gets InVentana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetInVentana(Boton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BotonDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets InVentana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInVentana(Boton element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BotonDomainRoleId, newVentana);
		}
		#endregion
		#region Boton domain role code
		
		/// <summary>
		/// Boton domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotonDomainRoleId = new global::System.Guid(0xaf2cb8b7, 0x8cd3, 0x41f4, 0x90, 0xfb, 0x6c, 0x0e, 0xe4, 0x34, 0x2a, 0x24);
		
		/// <summary>
		/// DomainRole Boton
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.Boton
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons/Boton.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons/Boton.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InVentana", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons/Boton.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("af2cb8b7-8cd3-41f4-90fb-6c0ee4342a24")]
		public virtual Boton Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Boton)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TieneBotons of a Ventana
		/// <summary>
		/// Gets a list of TieneBotons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Boton> GetTieneBotons(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaTieneBotons links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons> GetLinksToTieneBotons ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons>(ventanaInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.VentanaDomainRoleId);
		}
		#endregion
		#region Boton link accessor
		/// <summary>
		/// Get the VentanaTieneBotons link to a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons GetLinkToInVentana (global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton botonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons>(botonInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.BotonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Boton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaTieneBotons instance accessors
		
		/// <summary>
		/// Get any VentanaTieneBotons links between a given Ventana and a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaTieneBotons link between a given Ventanaand a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneBotons link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship VentanaTieneMenus
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4c709700-21fb-4aec-b50d-c668c7bf0f22")]
	public partial class VentanaTieneMenus : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaTieneMenus domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c709700, 0x21fb, 0x4aec, 0xb5, 0x0d, 0xc6, 0x68, 0xc7, 0xbf, 0x0f, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaTieneMenus link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Menu to use as the target of the relationship.</param>
		public VentanaTieneMenus(Ventana source, Menu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaTieneMenus.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaTieneMenus.MenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaTieneMenus(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaTieneMenus(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaTieneMenus(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaTieneMenus(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x20248c8f, 0x0591, 0x4f8e, 0x95, 0xc2, 0x86, 0x29, 0x04, 0x86, 0xa8, 0xc8);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus/Ventana.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus/Ventana.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TieneMenus", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("20248c8f-0591-4f8e-95c2-86290486a8c8")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InVentana of a Menu
		/// <summary>
		/// Gets InVentana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetInVentana(Menu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets InVentana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInVentana(Menu element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuDomainRoleId, newVentana);
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x523b45d1, 0x3d00, 0x49fb, 0xba, 0xd6, 0xef, 0x71, 0x11, 0xa6, 0x35, 0x8b);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus/Menu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus/Menu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InVentana", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus/Menu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("523b45d1-3d00-49fb-bad6-ef7111a6358b")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TieneMenus of a Ventana
		/// <summary>
		/// Gets a list of TieneMenus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Menu> GetTieneMenus(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaTieneMenus links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus> GetLinksToTieneMenus ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus>(ventanaInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.VentanaDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the VentanaTieneMenus link to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus GetLinkToInVentana (global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu menuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus>(menuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.MenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Menu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaTieneMenus instance accessors
		
		/// <summary>
		/// Get any VentanaTieneMenus links between a given Ventana and a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaTieneMenus link between a given Ventanaand a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.VentanaTieneMenus link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship Boton_Fin
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("97f25b59-0825-4b3f-ba77-24c781e930f9")]
	public partial class Boton_Fin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Boton_Fin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97f25b59, 0x0825, 0x4b3f, 0xba, 0x77, 0x24, 0xc7, 0x81, 0xe9, 0x30, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Boton_Fin link in the same Partition as the given Boton
		/// </summary>
		/// <param name="source">Boton to use as the source of the relationship.</param>
		/// <param name="target">EstadoFin to use as the target of the relationship.</param>
		public Boton_Fin(Boton source, EstadoFin target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Boton_Fin.BotonDomainRoleId, source), new DslModeling::RoleAssignment(Boton_Fin.EstadoFinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Boton_Fin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Boton_Fin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Boton_Fin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Boton_Fin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Boton domain role code
		
		/// <summary>
		/// Boton domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotonDomainRoleId = new global::System.Guid(0xcec75ebd, 0xde11, 0x4be6, 0xb2, 0xba, 0x46, 0x61, 0x8a, 0xb4, 0x4f, 0x24);
		
		/// <summary>
		/// DomainRole Boton
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.Boton
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin/Boton.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin/Boton.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EstadoFin", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin/Boton.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cec75ebd-de11-4be6-b2ba-46618ab44f24")]
		public virtual Boton Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Boton)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Botons of a EstadoFin
		/// <summary>
		/// Gets a list of Botons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Boton> GetBotons(EstadoFin element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(element, EstadoFinDomainRoleId);
		}
		#endregion
		#region EstadoFin domain role code
		
		/// <summary>
		/// EstadoFin domain role Id.
		/// </summary>
		public static readonly global::System.Guid EstadoFinDomainRoleId = new global::System.Guid(0xb8460e12, 0x1bb8, 0x4f46, 0x82, 0x06, 0x28, 0xa4, 0x53, 0xf9, 0x76, 0xaf);
		
		/// <summary>
		/// DomainRole EstadoFin
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.EstadoFin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin/EstadoFin.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin/EstadoFin.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Botons", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin/EstadoFin.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b8460e12-1bb8-4f46-8206-28a453f976af")]
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EstadoFin)DslModeling::DomainRoleInfo.GetRolePlayer(this, EstadoFinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EstadoFinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EstadoFin of a Boton
		/// <summary>
		/// Gets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EstadoFin GetEstadoFin(Boton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BotonDomainRoleId) as EstadoFin;
		}
		
		/// <summary>
		/// Sets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEstadoFin(Boton element, EstadoFin newEstadoFin)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BotonDomainRoleId, newEstadoFin);
		}
		#endregion
		#region Boton link accessor
		/// <summary>
		/// Get the Boton_Fin link to a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin GetLinkToEstadoFin (global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton botonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin>(botonInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.BotonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Boton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EstadoFin link accessor
		/// <summary>
		/// Get the list of Boton_Fin links to a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin> GetLinksToBotons ( global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin estadoFinInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin>(estadoFinInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.EstadoFinDomainRoleId);
		}
		#endregion
		#region Boton_Fin instance accessors
		
		/// <summary>
		/// Get any Boton_Fin links between a given Boton and a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton source, global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.BotonDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Boton_Fin link between a given Botonand a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton source, global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin.BotonDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Fin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship Boton_Ventana
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c0bd60a7-e9df-4355-8d13-2b7c4d66b56c")]
	public partial class Boton_Ventana : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Boton_Ventana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0bd60a7, 0xe9df, 0x4355, 0x8d, 0x13, 0x2b, 0x7c, 0x4d, 0x66, 0xb5, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Boton_Ventana link in the same Partition as the given Boton
		/// </summary>
		/// <param name="source">Boton to use as the source of the relationship.</param>
		/// <param name="target">Ventana to use as the target of the relationship.</param>
		public Boton_Ventana(Boton source, Ventana target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Boton_Ventana.BotonDomainRoleId, source), new DslModeling::RoleAssignment(Boton_Ventana.VentanaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Boton_Ventana(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Boton_Ventana(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Boton_Ventana(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Boton_Ventana(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Boton domain role code
		
		/// <summary>
		/// Boton domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotonDomainRoleId = new global::System.Guid(0xf432c607, 0xaea5, 0x46c5, 0x92, 0x40, 0x82, 0x26, 0x87, 0xfa, 0xd8, 0x6f);
		
		/// <summary>
		/// DomainRole Boton
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.Boton
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana/Boton.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana/Boton.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaDestino", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana/Boton.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f432c607-aea5-46c5-9240-822687fad86f")]
		public virtual Boton Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Boton)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Botons of a Ventana
		/// <summary>
		/// Gets a list of Botons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Boton> GetBotons(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0xd0fec76c, 0x0eca, 0x42d3, 0xab, 0x13, 0xf3, 0xeb, 0x3e, 0x3a, 0x79, 0xc0);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana/Ventana.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana/Ventana.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Botons", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d0fec76c-0eca-42d3-ab13-f3eb3e3a79c0")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaDestino of a Boton
		/// <summary>
		/// Gets VentanaDestino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentanaDestino(Boton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BotonDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets VentanaDestino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaDestino(Boton element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BotonDomainRoleId, newVentana);
		}
		#endregion
		#region Boton link accessor
		/// <summary>
		/// Get the Boton_Ventana link to a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana GetLinkToVentanaDestino (global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton botonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana>(botonInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.BotonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Boton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of Boton_Ventana links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana> GetLinksToBotons ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana>(ventanaInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.VentanaDomainRoleId);
		}
		#endregion
		#region Boton_Ventana instance accessors
		
		/// <summary>
		/// Get any Boton_Ventana links between a given Boton and a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.BotonDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Boton_Ventana link between a given Botonand a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana.BotonDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Boton_Ventana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship MenuTieneItemsMenu
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("aba0c750-3a30-43d7-b117-80aaca085250")]
	public partial class MenuTieneItemsMenu : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MenuTieneItemsMenu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaba0c750, 0x3a30, 0x43d7, 0xb1, 0x17, 0x80, 0xaa, 0xca, 0x08, 0x52, 0x50);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MenuTieneItemsMenu link in the same Partition as the given Menu
		/// </summary>
		/// <param name="source">Menu to use as the source of the relationship.</param>
		/// <param name="target">ItemMenu to use as the target of the relationship.</param>
		public MenuTieneItemsMenu(Menu source, ItemMenu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MenuTieneItemsMenu.MenuDomainRoleId, source), new DslModeling::RoleAssignment(MenuTieneItemsMenu.ItemMenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuTieneItemsMenu(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuTieneItemsMenu(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuTieneItemsMenu(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuTieneItemsMenu(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0xb7c2ba0c, 0xd53d, 0x478d, 0x88, 0x7d, 0x9c, 0x28, 0x64, 0x1b, 0x1c, 0x64);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu/Menu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu/Menu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ItemMenus", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu/Menu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b7c2ba0c-d53d-478d-887d-9c28641b1c64")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a ItemMenu
		/// <summary>
		/// Gets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Menu GetMenu(ItemMenu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemMenuDomainRoleId) as Menu;
		}
		
		/// <summary>
		/// Sets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMenu(ItemMenu element, Menu newMenu)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemMenuDomainRoleId, newMenu);
		}
		#endregion
		#region ItemMenu domain role code
		
		/// <summary>
		/// ItemMenu domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemMenuDomainRoleId = new global::System.Guid(0xd31feabb, 0x12af, 0x41a0, 0xa1, 0xbc, 0x58, 0xc4, 0x47, 0xd8, 0x72, 0x12);
		
		/// <summary>
		/// DomainRole ItemMenu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.ItemMenu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu/ItemMenu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu/ItemMenu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Menu", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu/ItemMenu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d31feabb-12af-41a0-a1bc-58c447d87212")]
		public virtual ItemMenu ItemMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemMenu)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemMenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemMenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemMenus of a Menu
		/// <summary>
		/// Gets a list of ItemMenus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemMenu> GetItemMenus(Menu element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemMenu>, ItemMenu>(element, MenuDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the list of MenuTieneItemsMenu links to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu> GetLinksToItemMenus ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu menuInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu>(menuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.MenuDomainRoleId);
		}
		#endregion
		#region ItemMenu link accessor
		/// <summary>
		/// Get the MenuTieneItemsMenu link to a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu GetLinkToMenu (global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu itemMenuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu>(itemMenuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.ItemMenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemMenu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MenuTieneItemsMenu instance accessors
		
		/// <summary>
		/// Get any MenuTieneItemsMenu links between a given Menu and a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.MenuDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu link in links )
			{
				if ( target.Equals(link.ItemMenu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MenuTieneItemsMenu link between a given Menuand a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.Menu source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu.MenuDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.MenuTieneItemsMenu link in links )
			{
				if ( target.Equals(link.ItemMenu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship ItemMenu_EstadoFin
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fcfe883a-ecd2-4cfe-9ee5-266d22f5a74d")]
	public partial class ItemMenu_EstadoFin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemMenu_EstadoFin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcfe883a, 0xecd2, 0x4cfe, 0x9e, 0xe5, 0x26, 0x6d, 0x22, 0xf5, 0xa7, 0x4d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemMenu_EstadoFin link in the same Partition as the given ItemMenu
		/// </summary>
		/// <param name="source">ItemMenu to use as the source of the relationship.</param>
		/// <param name="target">EstadoFin to use as the target of the relationship.</param>
		public ItemMenu_EstadoFin(ItemMenu source, EstadoFin target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemMenu_EstadoFin.ItemMenuDomainRoleId, source), new DslModeling::RoleAssignment(ItemMenu_EstadoFin.EstadoFinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemMenu_EstadoFin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemMenu_EstadoFin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemMenu_EstadoFin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemMenu_EstadoFin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ItemMenu domain role code
		
		/// <summary>
		/// ItemMenu domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemMenuDomainRoleId = new global::System.Guid(0x1fc793eb, 0x8653, 0x4dc9, 0xb1, 0xd3, 0xb9, 0xed, 0xc6, 0xa0, 0x57, 0x76);
		
		/// <summary>
		/// DomainRole ItemMenu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.ItemMenu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin/ItemMenu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin/ItemMenu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EstadoFin", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin/ItemMenu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1fc793eb-8653-4dc9-b1d3-b9edc6a05776")]
		public virtual ItemMenu ItemMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemMenu)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemMenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemMenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemMenus of a EstadoFin
		/// <summary>
		/// Gets a list of ItemMenus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemMenu> GetItemMenus(EstadoFin element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemMenu>, ItemMenu>(element, EstadoFinDomainRoleId);
		}
		#endregion
		#region EstadoFin domain role code
		
		/// <summary>
		/// EstadoFin domain role Id.
		/// </summary>
		public static readonly global::System.Guid EstadoFinDomainRoleId = new global::System.Guid(0xb2ce4dfd, 0xdf18, 0x4ac9, 0x91, 0xc1, 0x09, 0xd1, 0xc1, 0x37, 0x38, 0x3c);
		
		/// <summary>
		/// DomainRole EstadoFin
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.EstadoFin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin/EstadoFin.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin/EstadoFin.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ItemMenus", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin/EstadoFin.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b2ce4dfd-df18-4ac9-91c1-09d1c137383c")]
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EstadoFin)DslModeling::DomainRoleInfo.GetRolePlayer(this, EstadoFinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EstadoFinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EstadoFin of a ItemMenu
		/// <summary>
		/// Gets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EstadoFin GetEstadoFin(ItemMenu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemMenuDomainRoleId) as EstadoFin;
		}
		
		/// <summary>
		/// Sets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEstadoFin(ItemMenu element, EstadoFin newEstadoFin)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemMenuDomainRoleId, newEstadoFin);
		}
		#endregion
		#region ItemMenu link accessor
		/// <summary>
		/// Get the ItemMenu_EstadoFin link to a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin GetLinkToEstadoFin (global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu itemMenuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin>(itemMenuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.ItemMenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemMenu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EstadoFin link accessor
		/// <summary>
		/// Get the list of ItemMenu_EstadoFin links to a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin> GetLinksToItemMenus ( global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin estadoFinInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin>(estadoFinInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.EstadoFinDomainRoleId);
		}
		#endregion
		#region ItemMenu_EstadoFin instance accessors
		
		/// <summary>
		/// Get any ItemMenu_EstadoFin links between a given ItemMenu and a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu source, global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.ItemMenuDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemMenu_EstadoFin link between a given ItemMenuand a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu source, global::UPM_IPS.GVSJGGGASLProyectoIPS.EstadoFin target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin.ItemMenuDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_EstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.GVSJGGGASLProyectoIPS
{
	/// <summary>
	/// DomainRelationship ItemMenu_Ventana
	/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6e2946dc-7371-498b-b41e-ab03fd003db1")]
	public partial class ItemMenu_Ventana : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemMenu_Ventana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6e2946dc, 0x7371, 0x498b, 0xb4, 0x1e, 0xab, 0x03, 0xfd, 0x00, 0x3d, 0xb1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemMenu_Ventana link in the same Partition as the given ItemMenu
		/// </summary>
		/// <param name="source">ItemMenu to use as the source of the relationship.</param>
		/// <param name="target">Ventana to use as the target of the relationship.</param>
		public ItemMenu_Ventana(ItemMenu source, Ventana target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemMenu_Ventana.ItemMenuDomainRoleId, source), new DslModeling::RoleAssignment(ItemMenu_Ventana.VentanaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemMenu_Ventana(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemMenu_Ventana(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemMenu_Ventana(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemMenu_Ventana(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ItemMenu domain role code
		
		/// <summary>
		/// ItemMenu domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemMenuDomainRoleId = new global::System.Guid(0x5cd125fa, 0x1910, 0x4229, 0xa3, 0x25, 0x05, 0x4d, 0x0e, 0xa4, 0x81, 0x83);
		
		/// <summary>
		/// DomainRole ItemMenu
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.ItemMenu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana/ItemMenu.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana/ItemMenu.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaDestino", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana/ItemMenu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5cd125fa-1910-4229-a325-054d0ea48183")]
		public virtual ItemMenu ItemMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemMenu)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemMenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemMenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemMenus of a Ventana
		/// <summary>
		/// Gets a list of ItemMenus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemMenu> GetItemMenus(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemMenu>, ItemMenu>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x72d9d9fd, 0x345a, 0x44e9, 0xa7, 0x67, 0x65, 0x44, 0x5d, 0x97, 0x4d, 0x36);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana/Ventana.DisplayName", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana/Ventana.Description", typeof(global::UPM_IPS.GVSJGGGASLProyectoIPS.GVSJGGGASLProyectoIPSDomainModel), "UPM_IPS.GVSJGGGASLProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ItemMenus", PropertyDisplayNameKey="UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("72d9d9fd-345a-44e9-a767-65445d974d36")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaDestino of a ItemMenu
		/// <summary>
		/// Gets VentanaDestino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentanaDestino(ItemMenu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemMenuDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets VentanaDestino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaDestino(ItemMenu element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemMenuDomainRoleId, newVentana);
		}
		#endregion
		#region ItemMenu link accessor
		/// <summary>
		/// Get the ItemMenu_Ventana link to a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana GetLinkToVentanaDestino (global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu itemMenuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana>(itemMenuInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.ItemMenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemMenu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of ItemMenu_Ventana links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana> GetLinksToItemMenus ( global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana>(ventanaInstance, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.VentanaDomainRoleId);
		}
		#endregion
		#region ItemMenu_Ventana instance accessors
		
		/// <summary>
		/// Get any ItemMenu_Ventana links between a given ItemMenu and a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana> GetLinks( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana>();
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.ItemMenuDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemMenu_Ventana link between a given ItemMenuand a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana GetLink( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu source, global::UPM_IPS.GVSJGGGASLProyectoIPS.Ventana target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana>(source, global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana.ItemMenuDomainRoleId);
			foreach ( global::UPM_IPS.GVSJGGGASLProyectoIPS.ItemMenu_Ventana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
